# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pQ6lBStUcXzyHDTSm2Cjjy-1re3OhEbC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

insurance_data = pd.read_csv('medical_insurance.csv')

insurance_data.head()

insurance_data.tail()

insurance_data.info()

insurance_data.describe()

# Histogram of BMI
plt.figure(figsize=(8, 5))
sns.histplot(insurance_data['bmi'], bins=30, kde=True, color='orange')
plt.title('Distribution of BMI')
plt.xlabel('BMI')
plt.ylabel('Frequency')
plt.show()

# Scatter plot of Age vs. Charges
plt.figure(figsize=(10, 6))
sns.scatterplot(x='age', y='charges', data=insurance_data, hue='smoker', palette='coolwarm')
plt.title('Age vs. Charges')
plt.xlabel('Age')
plt.ylabel('Charges')
plt.legend(title='Smoker', loc='upper right')
plt.show()

# Encoding categorical variables
label_encoder = LabelEncoder()
insurance_data['sex'] = label_encoder.fit_transform(insurance_data['sex'])
insurance_data['smoker'] = label_encoder.fit_transform(insurance_data['smoker'])
insurance_data['region'] = label_encoder.fit_transform(insurance_data['region'])

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(insurance_data.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# Splitting the data into features and target variable
X = insurance_data.drop('charges', axis=1)
y = insurance_data['charges']

# Splitting the dataset into the Training set and Test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fitting a linear regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predicting on test set
y_pred = lr_model.predict(X_test)

# Evaluation metrics
print('Mean Squared Error:', mean_squared_error(y_test, y_pred))
print('R-squared:', r2_score(y_test, y_pred))

# K-means clustering
# Selecting relevant features for clustering
X_cluster = insurance_data[['age', 'bmi', 'smoker']]

# Elbow method to determine optimal number of clusters
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', n_init=10, random_state=42)
    kmeans.fit(X_cluster)
    wcss.append(kmeans.inertia_)

# Plotting the Elbow method
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

# Fitting K-means with optimal number of clusters
kmeans = KMeans(n_clusters=3, init='k-means++', random_state=42)
y_kmeans = kmeans.fit_predict(X_cluster)

# Visualizing the clusters
plt.figure(figsize=(10, 6))
plt.scatter(X_cluster.iloc[y_kmeans == 0, 0], X_cluster.iloc[y_kmeans == 0, 1], s=100, c='red', label='Cluster 1')
plt.scatter(X_cluster.iloc[y_kmeans == 1, 0], X_cluster.iloc[y_kmeans == 1, 1], s=100, c='blue', label='Cluster 2')
plt.scatter(X_cluster.iloc[y_kmeans == 2, 0], X_cluster.iloc[y_kmeans == 2, 1], s=100, c='green', label='Cluster 3')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', label='Centroids')
plt.title('Clusters of Policyholders')
plt.xlabel('Age')
plt.ylabel('BMI')
plt.legend()
plt.show()

